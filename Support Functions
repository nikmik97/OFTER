@jit
def inital_covariance(X,threshold = 1e-05):
    C0 = np.cov(X.T)
    C0[np.abs(C0) < threshold] = 0
    e_vals, e_vecs = np.linalg.eig(C0)
    
    e_vecs = np.real(e_vecs)
    e_vals = np.real(e_vals)
    
    idx = e_vals.argsort()[::-1]   
    e_vals = e_vals[idx]
    e_vecs = e_vecs[:,idx]
    
    return(e_vals,e_vecs)

@jit
def thresholded_correlation(X,y,minimum_correlation=0.05):
    Xy = np.concatenate((X,y.reshape(len(y),1)),axis=1)
    Corrs = spearmanr(Xy)[0][:-1,-1]
    inds = np.where(np.abs(Corrs) < minimum_correlation)[0]
    if len(inds) < X.shape[1]: 
        Corrs[inds] = 0
    return(Corrs.flatten())

def standardise(X,start): 
        Xnew = X.copy()
        mu = X[:start,:].mean(0)
        XX = X**2
        ss = XX[:start,:].sum(0)
        s = X[:start,:].std(0)
        Xnew[:start,:] = (X[:start,:] - mu) / s
        for i in range(start,X.shape[0]): 
            mu = (i * mu + X[i,:]) / (i+1)
            ss = ss + X[i,:]**2 
            s = np.sqrt((ss / i) - mu**2)
            Xnew[i,:] = (X[i,:] - mu) / s
        return(Xnew)

def metrics(ypreds,yreal): 
    dm_val = 0.5
    if (ypreds[1:].std() > 0) * (len(np.unique(ypreds)) > 10): 
        dm_val = dm_test(yreal[1:], ypreds[1:], ypreds[:-1], one_sided=True)[1]
        
    mets = [np.corrcoef((ypreds,yreal))[0,1],
           np.sqrt(np.mean((ypreds-yreal)**2)),
           np.mean(np.abs(ypreds-yreal)),
           np.mean(np.abs((ypreds-yreal)/yreal)),
           theil_u(ypreds,yreal),dm_val,
           boot_se_mse(ypreds,yreal)]
    return(np.array(mets))

def sample(n,prop = 0.5):
    n_sample = int(np.floor(prop * n))
    s = np.array(([i for i in range(n)]))
    random.shuffle(s)
    return(s[:n_sample])

def boot_se_mse(ypreds,yreal,B=100,prop = 0.5): 
    sqs = (ypreds - yreal)**2
    return(np.std([np.sqrt(np.mean(sqs[sample(len(sqs),prop = prop)])) for j in range(B)]))
